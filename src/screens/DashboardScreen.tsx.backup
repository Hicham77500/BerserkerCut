/**
 * √âcran du dashboard quotidien
 */

import React, { useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  SafeAreaView
} from 'react-native';
import { useAuth } from '../hooks/useAuth';
import { usePlan } from '../hooks/usePlan';
import { SupplementIntake } from '../types';
import { Colors, Typography, Spacing, BorderRadius } from '../utils/theme';
import { Card, Button, MacroCard } from '../components';

export const DashboardScreen: React.FC = () => {
  const { user } = useAuth();
  const { currentPlan, loading, error, generateDailyPlan, markSupplementTaken } = usePlan();

  const handleSupplementTaken = async (supplementId: string) => {
    try {
      await markSupplementTaken(supplementId);
      Alert.alert('Parfait !', 'Suppl√©ment marqu√© comme pris üëç');
    } catch (error) {
      Alert.alert('Erreur', 'Erreur lors de la mise √† jour');
    }
  };

  const handleRefresh = () => {
    generateDailyPlan();
  };

  const renderSupplementSection = (title: string, supplements: SupplementIntake[]) => {
    if (supplements.length === 0) return null;

    return (
      <View style={styles.supplementSection}>
        <Text style={styles.supplementSectionTitle}>{title}</Text>
        {supplements.map((supplement, index) => (
          <TouchableOpacity
            key={index}
            style={[
              styles.supplementItem,
              supplement.taken && styles.supplementItemTaken
            ]}
            onPress={() => !supplement.taken && handleSupplementTaken(supplement.supplementId)}
          >
            <View style={styles.supplementInfo}>
              <Text style={[
                styles.supplementName,
                supplement.taken && styles.supplementNameTaken
              ]}>
                {supplement.name}
              </Text>
              <Text style={styles.supplementDosage}>
                {supplement.dosage} ‚Ä¢ {supplement.time}
              </Text>
            </View>
            <View style={[
              styles.supplementStatus,
              supplement.taken && styles.supplementStatusTaken
            ]}>
              <Text style={[
                styles.supplementStatusText,
                supplement.taken && styles.supplementStatusTextTaken
              ]}>
                {supplement.taken ? '‚úì' : '‚óã'}
              </Text>
            </View>
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>G√©n√©ration de votre plan...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={handleRefresh}>
          <Text style={styles.retryButtonText}>R√©essayer</Text>
        </TouchableOpacity>
      </View>
    );
  }

  if (!currentPlan) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Aucun plan disponible</Text>
        <TouchableOpacity style={styles.retryButton} onPress={handleRefresh}>
          <Text style={styles.retryButtonText}>G√©n√©rer un plan</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <ScrollView 
      style={styles.container}
      refreshControl={
        <RefreshControl refreshing={loading} onRefresh={handleRefresh} />
      }
    >
      {/* En-t√™te */}
      <View style={styles.header}>
        <Text style={styles.greeting}>Bonjour {user?.profile.name} üëã</Text>
        <Text style={styles.date}>
          {new Date().toLocaleDateString('fr-FR', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </Text>
        <View style={styles.dayTypeBadge}>
          <Text style={styles.dayTypeText}>
            {currentPlan.dayType === 'training' ? 'üèãÔ∏è‚Äç‚ôÇÔ∏è Jour d\'entra√Ænement' : 'üò¥ Jour de repos'}
          </Text>
        </View>
      </View>

      {/* Conseil du jour */}
      <View style={styles.tipCard}>
        <Text style={styles.tipTitle}>üí° Conseil du jour</Text>
        <Text style={styles.tipText}>{currentPlan.dailyTip}</Text>
      </View>

      {/* R√©sum√© nutritionnel */}
      <View style={styles.nutritionCard}>
        <Text style={styles.cardTitle}>üìä Plan nutritionnel</Text>
        <View style={styles.macrosContainer}>
          <View style={styles.macroItem}>
            <Text style={styles.macroValue}>{currentPlan.nutritionPlan.totalCalories}</Text>
            <Text style={styles.macroLabel}>Calories</Text>
          </View>
          <View style={styles.macroItem}>
            <Text style={styles.macroValue}>{currentPlan.nutritionPlan.macros.protein}g</Text>
            <Text style={styles.macroLabel}>Prot√©ines</Text>
          </View>
          <View style={styles.macroItem}>
            <Text style={styles.macroValue}>{currentPlan.nutritionPlan.macros.carbs}g</Text>
            <Text style={styles.macroLabel}>Glucides</Text>
          </View>
          <View style={styles.macroItem}>
            <Text style={styles.macroValue}>{currentPlan.nutritionPlan.macros.fat}g</Text>
            <Text style={styles.macroLabel}>Lipides</Text>
          </View>
        </View>
      </View>

      {/* Repas */}
      <View style={styles.mealsCard}>
        <Text style={styles.cardTitle}>üçΩÔ∏è Repas du jour</Text>
        {currentPlan.nutritionPlan.meals.map((meal, index) => (
          <View key={meal.id} style={styles.mealItem}>
            <View style={styles.mealHeader}>
              <Text style={styles.mealName}>{meal.name}</Text>
              <Text style={styles.mealTime}>{meal.time}</Text>
            </View>
            <View style={styles.mealMacros}>
              <Text style={styles.mealCalories}>{meal.calories} cal</Text>
              <Text style={styles.mealMacroText}>
                P: {meal.macros.protein}g | G: {meal.macros.carbs}g | L: {meal.macros.fat}g
              </Text>
            </View>
            <View style={styles.foodsList}>
              {meal.foods.map((food, foodIndex) => (
                <Text key={foodIndex} style={styles.foodItem}>
                  ‚Ä¢ {food.name} ({food.quantity}{food.unit})
                </Text>
              ))}
            </View>
          </View>
        ))}
      </View>

      {/* Suppl√©ments */}
      <View style={styles.supplementsCard}>
        <Text style={styles.cardTitle}>üíä Suppl√©ments</Text>
        
        {renderSupplementSection('Matin', currentPlan.supplementPlan.morning)}
        {renderSupplementSection('Pr√©-entra√Ænement', currentPlan.supplementPlan.preWorkout)}
        {renderSupplementSection('Post-entra√Ænement', currentPlan.supplementPlan.postWorkout)}
        {renderSupplementSection('Soir', currentPlan.supplementPlan.evening)}
        
        {Object.values(currentPlan.supplementPlan).every(supplements => supplements.length === 0) && (
          <Text style={styles.noSupplementsText}>
            Aucun suppl√©ment configur√© pour aujourd'hui
          </Text>
        )}
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  loadingText: {
    fontSize: 18,
    color: '#7f8c8d',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
    padding: 20,
  },
  errorText: {
    fontSize: 18,
    color: '#e74c3c',
    textAlign: 'center',
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: '#e74c3c',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  header: {
    backgroundColor: 'white',
    padding: 20,
    marginBottom: 16,
  },
  greeting: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 4,
  },
  date: {
    fontSize: 16,
    color: '#7f8c8d',
    marginBottom: 12,
  },
  dayTypeBadge: {
    alignSelf: 'flex-start',
    backgroundColor: '#e74c3c',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  dayTypeText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '600',
  },
  tipCard: {
    backgroundColor: 'white',
    margin: 16,
    marginTop: 0,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  tipTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 8,
  },
  tipText: {
    fontSize: 16,
    color: '#7f8c8d',
    lineHeight: 24,
  },
  nutritionCard: {
    backgroundColor: 'white',
    margin: 16,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  cardTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 16,
  },
  macrosContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  macroItem: {
    alignItems: 'center',
  },
  macroValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#e74c3c',
  },
  macroLabel: {
    fontSize: 14,
    color: '#7f8c8d',
    marginTop: 4,
  },
  mealsCard: {
    backgroundColor: 'white',
    margin: 16,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  mealItem: {
    marginBottom: 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#ecf0f1',
  },
  mealHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  mealName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
  },
  mealTime: {
    fontSize: 14,
    color: '#7f8c8d',
  },
  mealMacros: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  mealCalories: {
    fontSize: 14,
    fontWeight: '600',
    color: '#e74c3c',
  },
  mealMacroText: {
    fontSize: 12,
    color: '#7f8c8d',
  },
  foodsList: {
    marginTop: 8,
  },
  foodItem: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 4,
  },
  supplementsCard: {
    backgroundColor: 'white',
    margin: 16,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    marginBottom: 32,
  },
  supplementSection: {
    marginBottom: 16,
  },
  supplementSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 8,
  },
  supplementItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#f9f9f9',
    borderRadius: 8,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#ecf0f1',
  },
  supplementItemTaken: {
    backgroundColor: '#d5f4e6',
    borderColor: '#27ae60',
  },
  supplementInfo: {
    flex: 1,
  },
  supplementName: {
    fontSize: 16,
    fontWeight: '500',
    color: '#2c3e50',
  },
  supplementNameTaken: {
    textDecorationLine: 'line-through',
    color: '#7f8c8d',
  },
  supplementDosage: {
    fontSize: 14,
    color: '#7f8c8d',
    marginTop: 2,
  },
  supplementStatus: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#ecf0f1',
    justifyContent: 'center',
    alignItems: 'center',
  },
  supplementStatusTaken: {
    backgroundColor: '#27ae60',
  },
  supplementStatusText: {
    fontSize: 16,
    color: '#7f8c8d',
  },
  supplementStatusTextTaken: {
    color: 'white',
  },
  noSupplementsText: {
    fontSize: 16,
    color: '#7f8c8d',
    textAlign: 'center',
    fontStyle: 'italic',
  },
});
